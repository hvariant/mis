!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANTOAN_NOOP	common/ppcomm.h	123;"	d
CHUNKSIZE	common/ppfile.h	15;"	d
CHUNKTABSIZE	cs/chunks.c	3;"	d	file:
CHUNKTABSIZE	mds/chunks.c	3;"	d	file:
CLTOCS_READ_CHUNK	common/ppcomm.h	139;"	d
CLTOCS_WRITE_CHUNK	common/ppcomm.h	142;"	d
CLTOMD_ACCESS	common/ppcomm.h	7;"	d
CLTOMD_APPEND_CHUNK	common/ppcomm.h	37;"	d
CLTOMD_CHGRP	common/ppcomm.h	52;"	d
CLTOMD_CHMOD	common/ppcomm.h	46;"	d
CLTOMD_CHOWN	common/ppcomm.h	49;"	d
CLTOMD_CREATE	common/ppcomm.h	25;"	d
CLTOMD_GETATTR	common/ppcomm.h	4;"	d
CLTOMD_LOOKUP_CHUNK	common/ppcomm.h	34;"	d
CLTOMD_MKDIR	common/ppcomm.h	16;"	d
CLTOMD_OPEN	common/ppcomm.h	28;"	d
CLTOMD_OPENDIR	common/ppcomm.h	10;"	d
CLTOMD_POP_CHUNK	common/ppcomm.h	58;"	d
CLTOMD_READDIR	common/ppcomm.h	13;"	d
CLTOMD_READ_CHUNK_INFO	common/ppcomm.h	31;"	d
CLTOMD_RELEASE	common/ppcomm.h	40;"	d
CLTOMD_RELEASEDIR	common/ppcomm.h	19;"	d
CLTOMD_RENAME	common/ppcomm.h	43;"	d
CLTOMD_RMDIR	common/ppcomm.h	22;"	d
CLTOMD_UNLINK	common/ppcomm.h	55;"	d
CSTOCL_READ_CHUNK	common/ppcomm.h	140;"	d
CSTOCL_WRITE_CHUNK	common/ppcomm.h	143;"	d
CSTOMD_REGISTER	common/ppcomm.h	127;"	d
CSTOMD_UPDATE_STATUS	common/ppcomm.h	133;"	d
CS_PORT	common/ppcomm.h	166;"	d
CS_PORT_STR	common/ppcomm.h	167;"	d
DATA	cs/cscl.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon3	file:
DATA	cs/csmds.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon2	file:
DATA	echo/echo.h	/^enum {KILL,DATA};$/;"	e	enum:__anon4
DATA	mds/mds.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon7	file:
DATA	mds/mdscs.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon9	file:
DATA	mis/mis.h	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon6
DEFAULT_GROUP	common/config.h	13;"	d
DEFAULT_USER	common/config.h	16;"	d
F	common/md5.c	46;"	d	file:
FF	common/md5.c	53;"	d	file:
FILE_MAXCHUNKS	common/ppfile.h	17;"	d
FUSE_USE_VERSION	client/client.c	1;"	d	file:
G	common/md5.c	47;"	d	file:
GG	common/md5.c	58;"	d	file:
H	common/md5.c	48;"	d	file:
HASHSIZE	mds/mds_fs.h	10;"	d
HASHSIZE	mis/mis_fs.h	10;"	d
HAVE_ARPA_INET_H	common/config.h	20;"	d
HAVE_ATEXIT	common/config.h	23;"	d
HAVE_BZERO	common/config.h	26;"	d
HAVE_DECL_STRERROR_R	common/config.h	30;"	d
HAVE_DIRENT_H	common/config.h	34;"	d
HAVE_DLFCN_H	common/config.h	37;"	d
HAVE_DUP2	common/config.h	40;"	d
HAVE_FCNTL_H	common/config.h	43;"	d
HAVE_FORK	common/config.h	46;"	d
HAVE_FSEEKO	common/config.h	49;"	d
HAVE_FTELLO	common/config.h	52;"	d
HAVE_FTRUNCATE	common/config.h	55;"	d
HAVE_FUSE_VERSION	common/config.h	58;"	d
HAVE_GETADDRINFO	common/config.h	61;"	d
HAVE_GETCWD	common/config.h	64;"	d
HAVE_GETPASS	common/config.h	67;"	d
HAVE_GETRUSAGE	common/config.h	70;"	d
HAVE_GETTIMEOFDAY	common/config.h	73;"	d
HAVE_INTTYPES_H	common/config.h	76;"	d
HAVE_LIMITS_H	common/config.h	79;"	d
HAVE_MALLOC	common/config.h	87;"	d
HAVE_MEMMOVE	common/config.h	90;"	d
HAVE_MEMORY_H	common/config.h	93;"	d
HAVE_MEMSET	common/config.h	96;"	d
HAVE_MKDIR	common/config.h	99;"	d
HAVE_MLOCKALL	common/config.h	102;"	d
HAVE_NETDB_H	common/config.h	108;"	d
HAVE_NETINET_IN_H	common/config.h	111;"	d
HAVE_PERROR	common/config.h	114;"	d
HAVE_POLL	common/config.h	117;"	d
HAVE_PREAD	common/config.h	120;"	d
HAVE_PTHREAD	common/config.h	123;"	d
HAVE_PTHREAD_SPIN_LOCK	common/config.h	126;"	d
HAVE_PWRITE	common/config.h	129;"	d
HAVE_READV	common/config.h	132;"	d
HAVE_REALLOC	common/config.h	136;"	d
HAVE_REALPATH	common/config.h	139;"	d
HAVE_SETITIMER	common/config.h	142;"	d
HAVE_SOCKET	common/config.h	145;"	d
HAVE_STDBOOL_H	common/config.h	152;"	d
HAVE_STDDEF_H	common/config.h	155;"	d
HAVE_STDINT_H	common/config.h	158;"	d
HAVE_STDLIB_H	common/config.h	161;"	d
HAVE_STRCHR	common/config.h	164;"	d
HAVE_STRDUP	common/config.h	167;"	d
HAVE_STRERROR	common/config.h	170;"	d
HAVE_STRERROR_R	common/config.h	173;"	d
HAVE_STRINGS_H	common/config.h	176;"	d
HAVE_STRING_H	common/config.h	179;"	d
HAVE_STRTOL	common/config.h	182;"	d
HAVE_STRTOUL	common/config.h	185;"	d
HAVE_STRUCT_RUSAGE_RU_MAXRSS	common/config.h	188;"	d
HAVE_STRUCT_STAT_ST_BLKSIZE	common/config.h	194;"	d
HAVE_STRUCT_STAT_ST_BLOCKS	common/config.h	197;"	d
HAVE_STRUCT_STAT_ST_RDEV	common/config.h	203;"	d
HAVE_STRUCT_TM_TM_GMTOFF	common/config.h	206;"	d
HAVE_ST_BLOCKS	common/config.h	210;"	d
HAVE_SYSLOG_H	common/config.h	213;"	d
HAVE_SYS_MMAN_H	common/config.h	220;"	d
HAVE_SYS_RESOURCE_H	common/config.h	227;"	d
HAVE_SYS_SOCKET_H	common/config.h	233;"	d
HAVE_SYS_STATVFS_H	common/config.h	236;"	d
HAVE_SYS_STAT_H	common/config.h	239;"	d
HAVE_SYS_TIME_H	common/config.h	242;"	d
HAVE_SYS_TYPES_H	common/config.h	245;"	d
HAVE_SYS_WAIT_H	common/config.h	248;"	d
HAVE_UNISTD_H	common/config.h	251;"	d
HAVE_VFORK	common/config.h	254;"	d
HAVE_WORKING_FORK	common/config.h	260;"	d
HAVE_WORKING_VFORK	common/config.h	263;"	d
HAVE_WRITEV	common/config.h	266;"	d
HAVE_ZLIB_H	common/config.h	269;"	d
HAVE__BOOL	common/config.h	272;"	d
HEADER	cs/cscl.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon3	file:
HEADER	cs/csmds.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon2	file:
HEADER	mds/mds.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon7	file:
HEADER	mds/mdscs.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon9	file:
HEADER	mis/mis.h	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon6
HEADER_LEN	common/ppcomm.h	156;"	d
HH	common/md5.c	63;"	d	file:
I	common/md5.c	49;"	d	file:
II	common/md5.c	68;"	d	file:
KILL	cs/cscl.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon3	file:
KILL	cs/csmds.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon2	file:
KILL	echo/echo.h	/^enum {KILL,DATA};$/;"	e	enum:__anon4
KILL	mds/mds.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon7	file:
KILL	mds/mdscs.c	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon9	file:
KILL	mis/mis.h	/^enum {KILL,HEADER,DATA};$/;"	e	enum:__anon6
LIGHT_MFS	common/config.h	275;"	d
LSTAT_FOLLOWS_SLASHED_SYMLINK	common/config.h	279;"	d
LT_OBJDIR	common/config.h	283;"	d
LateRunTab	cs/init.h	/^},LateRunTab[]={$/;"	v	typeref:struct:__anon1
LateRunTab	mds/init.h	/^},LateRunTab[]={$/;"	v	typeref:struct:__anon8
LateRunTab	mis/init.h	/^},LateRunTab[]={$/;"	v	typeref:struct:__anon5
MAXBUFSIZE	echo/echo.h	16;"	d
MAXBUFSIZE	mds/mds.h	24;"	d
MAXBUFSIZE	mds/mdscs.h	21;"	d
MAXBUFSIZE	mis/mis.h	20;"	d
MDSCS_PORT	common/ppcomm.h	160;"	d
MDSCS_PORT_STR	common/ppcomm.h	161;"	d
MDS_PORT	common/ppcomm.h	158;"	d
MDS_PORT_STR	common/ppcomm.h	159;"	d
MDTOCL_ACCESS	common/ppcomm.h	8;"	d
MDTOCL_APPEND_CHUNK	common/ppcomm.h	38;"	d
MDTOCL_CHGRP	common/ppcomm.h	53;"	d
MDTOCL_CHMOD	common/ppcomm.h	47;"	d
MDTOCL_CHOWN	common/ppcomm.h	50;"	d
MDTOCL_CREATE	common/ppcomm.h	26;"	d
MDTOCL_GETATTR	common/ppcomm.h	5;"	d
MDTOCL_LOOKUP_CHUNK	common/ppcomm.h	35;"	d
MDTOCL_MKDIR	common/ppcomm.h	17;"	d
MDTOCL_OPEN	common/ppcomm.h	29;"	d
MDTOCL_OPENDIR	common/ppcomm.h	11;"	d
MDTOCL_POP_CHUNK	common/ppcomm.h	59;"	d
MDTOCL_READDIR	common/ppcomm.h	14;"	d
MDTOCL_READ_CHUNK_INFO	common/ppcomm.h	32;"	d
MDTOCL_RELEASE	common/ppcomm.h	41;"	d
MDTOCL_RELEASEDIR	common/ppcomm.h	20;"	d
MDTOCL_RENAME	common/ppcomm.h	44;"	d
MDTOCL_RMDIR	common/ppcomm.h	23;"	d
MDTOCL_UNLINK	common/ppcomm.h	56;"	d
MDTOCS_CREATE	common/ppcomm.h	130;"	d
MDTOCS_DELETE	common/ppcomm.h	131;"	d
MDTOCS_FILL_CHUNK	common/ppcomm.h	135;"	d
MDTOCS_REGISTER	common/ppcomm.h	128;"	d
MDTOMI_ACCESS	common/ppcomm.h	66;"	d
MDTOMI_APPEND_CHUNK	common/ppcomm.h	117;"	d
MDTOMI_CHGRP	common/ppcomm.h	99;"	d
MDTOMI_CHMOD	common/ppcomm.h	96;"	d
MDTOMI_CHOWN	common/ppcomm.h	102;"	d
MDTOMI_CREATE	common/ppcomm.h	84;"	d
MDTOMI_GETATTR	common/ppcomm.h	63;"	d
MDTOMI_LOOKUP_CHUNK	common/ppcomm.h	114;"	d
MDTOMI_MKDIR	common/ppcomm.h	75;"	d
MDTOMI_OPEN	common/ppcomm.h	87;"	d
MDTOMI_OPENDIR	common/ppcomm.h	69;"	d
MDTOMI_READDIR	common/ppcomm.h	72;"	d
MDTOMI_READ_CHUNK_INFO	common/ppcomm.h	111;"	d
MDTOMI_RELEASE	common/ppcomm.h	90;"	d
MDTOMI_RELEASEDIR	common/ppcomm.h	78;"	d
MDTOMI_RENAME	common/ppcomm.h	93;"	d
MDTOMI_RMDIR	common/ppcomm.h	81;"	d
MDTOMI_UNLINK	common/ppcomm.h	108;"	d
MDTOMI_UPDATE_ATTR	common/ppcomm.h	105;"	d
MFSMAXFILES	common/main.c	10;"	d	file:
MIS_PORT	common/ppcomm.h	163;"	d
MIS_PORT_STR	common/ppcomm.h	164;"	d
MITOMD_ACCESS	common/ppcomm.h	67;"	d
MITOMD_APPEND_CHUNK	common/ppcomm.h	118;"	d
MITOMD_CHGRP	common/ppcomm.h	100;"	d
MITOMD_CHMOD	common/ppcomm.h	97;"	d
MITOMD_CHOWN	common/ppcomm.h	103;"	d
MITOMD_CREATE	common/ppcomm.h	85;"	d
MITOMD_GETATTR	common/ppcomm.h	64;"	d
MITOMD_LOOKUP_CHUNK	common/ppcomm.h	115;"	d
MITOMD_MKDIR	common/ppcomm.h	76;"	d
MITOMD_OPEN	common/ppcomm.h	88;"	d
MITOMD_OPENDIR	common/ppcomm.h	70;"	d
MITOMD_READDIR	common/ppcomm.h	73;"	d
MITOMD_READ_CHUNK_INFO	common/ppcomm.h	112;"	d
MITOMD_RELEASE	common/ppcomm.h	91;"	d
MITOMD_RELEASEDIR	common/ppcomm.h	79;"	d
MITOMD_RENAME	common/ppcomm.h	94;"	d
MITOMD_RMDIR	common/ppcomm.h	82;"	d
MITOMD_UNLINK	common/ppcomm.h	109;"	d
MITOMD_UPDATE_ATTR	common/ppcomm.h	106;"	d
PACKAGE	common/config.h	286;"	d
PACKAGE_BUGREPORT	common/config.h	289;"	d
PACKAGE_NAME	common/config.h	292;"	d
PACKAGE_STRING	common/config.h	295;"	d
PACKAGE_TARNAME	common/config.h	298;"	d
PACKAGE_URL	common/config.h	301;"	d
PACKAGE_VERSION	common/config.h	304;"	d
PREFIX	common/config.h	307;"	d
PROTO_BASE	common/config.h	310;"	d
RND_RC4_STEP	common/random.c	62;"	d	file:
ROTATE_LEFT	common/md5.c	51;"	d	file:
RunTab	cs/init.h	/^} RunTab[]={$/;"	v	typeref:struct:__anon1
RunTab	mds/init.h	/^} RunTab[]={$/;"	v	typeref:struct:__anon8
RunTab	mis/init.h	/^} RunTab[]={$/;"	v	typeref:struct:__anon5
S11	common/md5.c	23;"	d	file:
S12	common/md5.c	24;"	d	file:
S13	common/md5.c	25;"	d	file:
S14	common/md5.c	26;"	d	file:
S21	common/md5.c	27;"	d	file:
S22	common/md5.c	28;"	d	file:
S23	common/md5.c	29;"	d	file:
S24	common/md5.c	30;"	d	file:
S31	common/md5.c	31;"	d	file:
S32	common/md5.c	32;"	d	file:
S33	common/md5.c	33;"	d	file:
S34	common/md5.c	34;"	d	file:
S41	common/md5.c	35;"	d	file:
S42	common/md5.c	36;"	d	file:
S43	common/md5.c	37;"	d	file:
S44	common/md5.c	38;"	d	file:
STDC_HEADERS	common/config.h	318;"	d
STRERROR_R_CHAR_P	common/config.h	321;"	d
TIME_WITH_SYS_TIME	common/config.h	324;"	d
VERSHEX	common/config.h	330;"	d
VERSION	common/config.h	333;"	d
VERSMAJ	common/config.h	336;"	d
VERSMID	common/config.h	339;"	d
VERSMIN	common/config.h	342;"	d
WORDS_BIGENDIAN	common/config.h	348;"	d
_DARWIN_USE_64_BIT_INODE	common/config.h	358;"	d
_DATAPACK_H_	common/datapack.h	20;"	d
_MASSERT_H_	common/massert.h	20;"	d
_MD5_H_	common/md5.h	20;"	d
_RC4RANDOM_H_	common/random.h	20;"	d
_SLOGGER_H_	common/slogger.h	2;"	d
_SOCKETS_H_	common/sockets.h	20;"	d
_STRERR_H_	common/strerr.h	20;"	d
__CHUNKS_H__	cs/chunks.h	2;"	d
__CHUNKS_H__	mds/chunks.h	2;"	d
__CLIENT_H__	client/client.h	2;"	d
__CSCL_H__	cs/cscl.h	2;"	d
__CSMDS_H__	cs/csmds.h	2;"	d
__ECHO_H__	echo/echo.h	2;"	d
__MDSCS_H__	mds/mdscs.h	2;"	d
__MDS_FS_H__	mds/mds_fs.h	2;"	d
__MDS_FS_H__	mis/mis_fs.h	2;"	d
__MDS_H__	mds/mds.h	2;"	d
__MIS_H__	mis/mis.h	2;"	d
__PPCOMM_H__	common/ppcomm.h	2;"	d
__PPDS_H__	common/ppds.h	2;"	d
__PPFILE_H__	common/ppfile.h	2;"	d
_attr	common/ppfile.h	/^typedef struct _attr{$/;"	s
_csclserventry	cs/cscl.h	/^typedef struct _csclserventry{$/;"	s
_csmdsserventry	cs/csmds.h	/^typedef struct _csmdsserventry{$/;"	s
_echoserventry	echo/echo.h	/^typedef struct _echoserventry{$/;"	s
_md5ctx	common/md5.h	/^typedef struct _md5ctx {$/;"	s
_mdscsserventry	mds/mdscs.h	/^typedef struct _mdscsserventry{$/;"	s
_mdsserventry	mds/mds.h	/^typedef struct _mdsserventry{$/;"	s
_misserventry	mis/mis.h	/^typedef struct _misserventry{$/;"	s
a	common/ppfile.h	/^  attr a;$/;"	m	struct:ppfile
add_chunk	cs/chunks.c	/^void add_chunk(cschunk* c){$/;"	f
add_chunk	mds/chunks.c	/^void add_chunk(mdschunk* c){$/;"	f
add_file	mds/mds_fs.c	/^void add_file(ppfile* f){$/;"	f
add_file	mis/mis_fs.c	/^void add_file(ppfile* f){$/;"	f
alloced	common/ppfile.h	/^  int alloced;$/;"	m	struct:ppfile
atime	common/ppfile.h	/^  int atime,ctime,mtime;$/;"	m	struct:_attr
attr	common/ppfile.h	/^} attr;$/;"	t	typeref:struct:_attr
availspace	cs/chunks.c	/^static int space,availspace,chunks;$/;"	v	file:
availspace	mds/mdscs.h	/^  int space,availspace,chunks;$/;"	m	struct:_mdscsserventry
buf	common/ppcomm.h	/^  char* buf;$/;"	m	struct:ppacket
buf	cs/chunks.h	/^  uint8_t* buf;$/;"	m	struct:cschunk
buffer	common/md5.h	/^	uint8_t buffer[64];$/;"	m	struct:_md5ctx
buffer	echo/echo.h	/^  char buffer[MAXBUFSIZE];$/;"	m	struct:_echoserventry
bytesleft	common/ppcomm.h	/^  int bytesleft;$/;"	m	struct:ppacket
bytesleft	cs/cscl.h	/^  int bytesleft;$/;"	m	struct:_csclserventry
bytesleft	cs/csmds.h	/^  int bytesleft;$/;"	m	struct:_csmdsserventry
bytesleft	mds/mds.h	/^  int bytesleft;$/;"	m	struct:_mdsserventry
bytesleft	mds/mdscs.h	/^  int bytesleft;$/;"	m	struct:_mdscsserventry
bytesleft	mis/mis.h	/^  int bytesleft;$/;"	m	struct:_misserventry
child	common/ppfile.h	/^  struct ppfile* child;$/;"	m	struct:ppfile	typeref:struct:ppfile::ppfile
chunkid	cs/chunks.h	/^  uint64_t chunkid;$/;"	m	struct:cschunk
chunkid	mds/chunks.h	/^  uint64_t chunkid;$/;"	m	struct:mdschunk
chunklist	cs/chunks.h	/^linklist* chunklist;$/;"	v
chunks	common/ppfile.h	/^  int chunks;$/;"	m	struct:ppfile
chunks	cs/chunks.c	/^static int space,availspace,chunks;$/;"	v	file:
chunks	mds/mdscs.h	/^  int space,availspace,chunks;$/;"	m	struct:_mdscsserventry
chunks_init	cs/chunks.c	/^int chunks_init(){$/;"	f
chunks_init	mds/chunks.c	/^int chunks_init(){$/;"	f
chxxx	api_test/api_test.c	/^static void chxxx(int sockfd,int ip,char* path,int cmd,int opt){$/;"	f	file:
clist	common/ppfile.h	/^  uint64_t* clist;$/;"	m	struct:ppfile
clist	mds/mdscs.h	/^  linklist* clist;$/;"	m	struct:_mdscsserventry
cmd	common/ppcomm.h	/^  int cmd;$/;"	m	struct:ppacket
count	common/md5.h	/^	uint32_t count[2];$/;"	m	struct:_md5ctx
createpacket_r	common/ppcomm.c	/^ppacket* createpacket_r(int size,int cmd,int id){$/;"	f
createpacket_s	common/ppcomm.c	/^ppacket* createpacket_s(int size,int cmd,int id){$/;"	f
cschunk	cs/chunks.h	/^typedef struct cschunk{$/;"	s
cschunk	cs/chunks.h	/^} cschunk;$/;"	t	typeref:struct:cschunk
cscl_desc	cs/cscl.c	/^void cscl_desc(struct pollfd *pdesc,uint32_t *ndesc) {$/;"	f
cscl_gotpacket	cs/cscl.c	/^void cscl_gotpacket(csclserventry* eptr,ppacket* p){$/;"	f
cscl_init	cs/cscl.c	/^int cscl_init(void){$/;"	f
cscl_read	cs/cscl.c	/^void cscl_read(csclserventry *eptr) {$/;"	f
cscl_read_chunk	cs/cscl.c	/^void cscl_read_chunk(csclserventry* eptr,ppacket* p){$/;"	f
cscl_serve	cs/cscl.c	/^void cscl_serve(struct pollfd *pdesc) {$/;"	f
cscl_term	cs/cscl.c	/^void cscl_term(void) {$/;"	f
cscl_write	cs/cscl.c	/^void cscl_write(csclserventry *eptr) {$/;"	f
cscl_write_chunk	cs/cscl.c	/^void cscl_write_chunk(csclserventry* eptr,ppacket* p){$/;"	f
csclserventry	cs/cscl.h	/^} csclserventry;$/;"	t	typeref:struct:_csclserventry
csclservhead	cs/cscl.c	/^static csclserventry* csclservhead = NULL;$/;"	v	file:
cshash	cs/chunks.c	/^typedef struct cshash{$/;"	s	file:
cshash	cs/chunks.c	/^} cshash;$/;"	t	typeref:struct:cshash	file:
csip	mds/chunks.h	/^  uint32_t csip;$/;"	m	struct:mdschunk
csmds	cs/csmds.c	/^static csmdsserventry* csmds = NULL;$/;"	v	file:
csmds_create	cs/csmds.c	/^void csmds_create(csmdsserventry* eptr,ppacket* p){$/;"	f
csmds_delete	cs/csmds.c	/^void csmds_delete(csmdsserventry* eptr,ppacket* p){$/;"	f
csmds_desc	cs/csmds.c	/^void csmds_desc(struct pollfd *pdesc,uint32_t *ndesc) {$/;"	f
csmds_fill_chunk	cs/csmds.c	/^void csmds_fill_chunk(csmdsserventry* eptr,ppacket* p){$/;"	f
csmds_gotpacket	cs/csmds.c	/^void csmds_gotpacket(csmdsserventry* eptr,ppacket* p){$/;"	f
csmds_init	cs/csmds.c	/^int csmds_init(void){$/;"	f
csmds_read	cs/csmds.c	/^void csmds_read(csmdsserventry *eptr) {$/;"	f
csmds_register	cs/csmds.c	/^void csmds_register(csmdsserventry* eptr,ppacket* p){$/;"	f
csmds_serve	cs/csmds.c	/^void csmds_serve(struct pollfd *pdesc) {$/;"	f
csmds_term	cs/csmds.c	/^void csmds_term(void) {$/;"	f
csmds_update_status	cs/csmds.c	/^void csmds_update_status(csmdsserventry* eptr,ppacket* p){$/;"	f
csmds_write	cs/csmds.c	/^void csmds_write(csmdsserventry *eptr) {$/;"	f
csmdsserventry	cs/csmds.h	/^} csmdsserventry;$/;"	t	typeref:struct:_csmdsserventry
ctime	common/ppfile.h	/^  int atime,ctime,mtime;$/;"	m	struct:_attr
data	common/ppds.h	/^  void* data;$/;"	m	struct:hashnode
data	common/ppds.h	/^  void* data;$/;"	m	struct:linklist
data	cs/chunks.c	/^  cschunk* data;$/;"	m	struct:cshash	file:
data	mds/chunks.c	/^  mdschunk* data;$/;"	m	struct:mdshash	file:
deentry	common/main.c	/^typedef struct deentry {$/;"	s	file:
deentry	common/main.c	/^} deentry;$/;"	t	typeref:struct:deentry	file:
dehead	common/main.c	/^static deentry *dehead=NULL;$/;"	v	file:
desc	common/main.c	/^	void (*desc)(struct pollfd *,uint32_t *);$/;"	m	struct:pollentry	file:
destruct	common/main.c	/^void destruct() {$/;"	f
eassert	common/massert.h	31;"	d
echo_desc	echo/echo.c	/^void echo_desc(struct pollfd *pdesc,uint32_t *ndesc) {$/;"	f
echo_init	echo/echo.c	/^int echo_init(void){$/;"	f
echo_read	echo/echo.c	/^void echo_read(echoserventry *eptr) {$/;"	f
echo_serve	echo/echo.c	/^void echo_serve(struct pollfd *pdesc) {$/;"	f
echo_term	echo/echo.c	/^void echo_term(void) {$/;"	f
echo_write	echo/echo.c	/^void echo_write(echoserventry *eptr) {$/;"	f
echoserventry	echo/echo.h	/^} echoserventry;$/;"	t	typeref:struct:_echoserventry
echoservhead	echo/echo.c	/^echoserventry* echoservhead = NULL;$/;"	v
errent	common/strerr.c	/^typedef struct errent {$/;"	s	file:
errent	common/strerr.c	/^} errent;$/;"	t	typeref:struct:errent	file:
errhash	common/strerr.c	/^static errent *errhash = NULL;$/;"	v	file:
errhsize	common/strerr.c	/^static uint32_t errhsize = 0;$/;"	v	file:
errtab	common/strerr.c	/^static errent errtab[] = {$/;"	v	file:
exiting	common/main.c	/^volatile int exiting;$/;"	v
fd	client/client.c	/^int fd;$/;"	v
file_append_chunk	common/ppfile.c	/^int file_append_chunk(ppfile* f,uint64_t id){\/\/should set a limit$/;"	f
file_pop_chunk	common/ppfile.c	/^int file_pop_chunk(ppfile* f,uint64_t* id){$/;"	f
fn	cs/init.h	/^	runfn fn;$/;"	m	struct:__anon1
fn	mds/init.h	/^	runfn fn;$/;"	m	struct:__anon8
fn	mis/init.h	/^	runfn fn;$/;"	m	struct:__anon5
free_all_registered_entries	common/main.c	/^void free_all_registered_entries(void) {$/;"	f
free_chunk	cs/chunks.c	/^void free_chunk(cschunk* c){$/;"	f
free_chunk	mds/chunks.c	/^void free_chunk(mdschunk* c){$/;"	f
free_file	common/ppfile.c	/^void free_file(ppfile* f){$/;"	f
fun	common/main.c	/^	void (*fun)(void);$/;"	m	struct:deentry	file:
fuse_fill_dir_t	client/client.h	/^typedef int(* fuse_fill_dir_t)(void *buf, const char *name, const struct stat *stbuf, off_t off);$/;"	t
get16bit	common/datapack.h	/^static inline uint16_t get16bit(const uint8_t **ptr) {$/;"	f
get32bit	common/datapack.h	/^static inline uint32_t get32bit(const uint8_t **ptr) {$/;"	f
get64bit	common/datapack.h	/^static inline uint64_t get64bit(const uint8_t **ptr) {$/;"	f
get8bit	common/datapack.h	/^static inline uint8_t get8bit(const uint8_t **ptr) {$/;"	f
get_chunk_info	cs/chunks.c	/^void get_chunk_info(int* _space,int* _availspace,int* _chunks){$/;"	f
getbasename	common/ppfile.c	/^char* getbasename(char* path){$/;"	f
gid	common/ppfile.h	/^  int uid,gid;$/;"	m	struct:_attr
global_chunk_counter	mds/mdscs.c	/^static uint64_t global_chunk_counter;$/;"	v	file:
hash	cs/chunks.c	/^int hash(uint64_t id){$/;"	f
hash	mds/chunks.c	/^int hash(uint64_t id){$/;"	f
hashnode	common/ppds.h	/^typedef struct hashnode{$/;"	s
hashnode	common/ppds.h	/^} hashnode;$/;"	t	typeref:struct:hashnode
headbuf	cs/cscl.h	/^  uint8_t headbuf[20];$/;"	m	struct:_csclserventry
headbuf	cs/csmds.h	/^  uint8_t headbuf[20];$/;"	m	struct:_csmdsserventry
headbuf	mds/mds.h	/^  uint8_t headbuf[20];$/;"	m	struct:_mdsserventry
headbuf	mds/mdscs.h	/^  uint8_t headbuf[20];$/;"	m	struct:_mdscsserventry
headbuf	mis/mis.h	/^  uint8_t headbuf[20];$/;"	m	struct:_misserventry
hello_path	client/client.c	/^char *hello_path = "\/hello";$/;"	v
hello_str	client/client.c	/^char *hello_str = "hello world";$/;"	v
hexdigit	api_test/api_test.c	/^static char* hexdigit = "0123456789ABCDEF";$/;"	v	file:
i	common/random.c	/^static uint8_t i,j;$/;"	v	file:
id	common/ppcomm.h	/^  int id;$/;"	m	struct:ppacket
ignoresignal	common/main.c	/^static int ignoresignal[]={$/;"	v	file:
init_fs	mds/mds_fs.c	/^int init_fs(){$/;"	f
init_fs	mis/mis_fs.c	/^int init_fs(){$/;"	f
initialize	common/main.c	/^int initialize(void) {$/;"	f
initialize_late	common/main.c	/^int initialize_late(void) {$/;"	f
inpacket	cs/cscl.h	/^  ppacket* inpacket;$/;"	m	struct:_csclserventry
inpacket	cs/csmds.h	/^  ppacket* inpacket;$/;"	m	struct:_csmdsserventry
inpacket	mds/mds.h	/^  ppacket* inpacket;$/;"	m	struct:_mdsserventry
inpacket	mds/mdscs.h	/^  ppacket* inpacket;$/;"	m	struct:_mdscsserventry
inpacket	mis/mis.h	/^  ppacket* inpacket;$/;"	m	struct:_misserventry
ip	client/client.c	/^char *ip = "127.0.0.1";$/;"	v
j	common/random.c	/^static uint8_t i,j;$/;"	v	file:
key	common/ppds.h	/^  char* key;$/;"	m	struct:hashnode
key	cs/chunks.c	/^  uint64_t key;$/;"	m	struct:cshash	file:
key	mds/chunks.c	/^  uint64_t key;$/;"	m	struct:mdshash	file:
link	common/ppfile.h	/^  int link;$/;"	m	struct:_attr
linklist	common/ppds.h	/^typedef struct linklist{$/;"	s
linklist	common/ppds.h	/^} linklist;$/;"	t	typeref:struct:linklist
lookup_chunk	cs/chunks.c	/^cschunk* lookup_chunk(uint64_t chunkid){$/;"	f
lookup_chunk	mds/chunks.c	/^mdschunk* lookup_chunk(uint64_t chunkid){$/;"	f
lookup_file	mds/mds_fs.c	/^ppfile* lookup_file(char* p){$/;"	f
lookup_file	mis/mis_fs.c	/^ppfile* lookup_file(char* p){$/;"	f
lsock	cs/cscl.c	/^static int lsock;$/;"	v	file:
lsock	echo/echo.c	/^int lsock;$/;"	v
lsock	mds/mds.c	/^static int lsock;$/;"	v	file:
lsock	mds/mdscs.c	/^static int lsock;$/;"	v	file:
lsock	mis/mis.c	/^static int lsock;$/;"	v	file:
lsockpdescpos	cs/cscl.c	/^static int lsockpdescpos;$/;"	v	file:
lsockpdescpos	echo/echo.c	/^int lsockpdescpos;$/;"	v
lsockpdescpos	mds/mds.c	/^static int lsockpdescpos;$/;"	v	file:
lsockpdescpos	mds/mdscs.c	/^static int lsockpdescpos;$/;"	v	file:
lsockpdescpos	mis/mis.c	/^static int lsockpdescpos;$/;"	v	file:
main	api_test/api_test.c	/^int main(void){$/;"	f
main	client/client.c	/^int main(int argc, char* argv[]) {$/;"	f
main	common/main.c	/^int main(int argc,char **argv) {$/;"	f
main_destructregister	common/main.c	/^void main_destructregister (void (*fun)(void)) {$/;"	f
main_pollregister	common/main.c	/^void main_pollregister (void (*desc)(struct pollfd *,uint32_t *),void (*serve)(struct pollfd *)) {$/;"	f
mainloop	common/main.c	/^void mainloop() {$/;"	f
massert	common/massert.h	28;"	d
md5_decode	common/md5.c	/^static void md5_decode (uint32_t *output,const uint8_t *input,uint32_t len) {$/;"	f	file:
md5_encode	common/md5.c	/^static void md5_encode (uint8_t *output,const uint32_t *input,uint32_t len) {$/;"	f	file:
md5_final	common/md5.c	/^void md5_final (uint8_t digest[16],md5ctx *ctx) {$/;"	f
md5_init	common/md5.c	/^void md5_init (md5ctx *ctx) {$/;"	f
md5_transform	common/md5.c	/^static void md5_transform (uint32_t state[4],const uint8_t block[64]) {$/;"	f	file:
md5_update	common/md5.c	/^void md5_update (md5ctx *ctx,const uint8_t *buff,uint32_t leng) {$/;"	f
md5ctx	common/md5.h	/^} md5ctx;$/;"	t	typeref:struct:_md5ctx
mds_chgrp	mds/mds.c	/^void mds_chgrp(mdsserventry* eptr,ppacket* p){$/;"	f
mds_chmod	mds/mds.c	/^void mds_chmod(mdsserventry* eptr,ppacket* p){$/;"	f
mds_chown	mds/mds.c	/^void mds_chown(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_append_chunk	mds/mds.c	/^void mds_cl_append_chunk(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_chgrp	mds/mds.c	/^void mds_cl_chgrp(mdsserventry* eptr,ppacket* inp){$/;"	f
mds_cl_chmod	mds/mds.c	/^void mds_cl_chmod(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_chown	mds/mds.c	/^void mds_cl_chown(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_create	mds/mds.c	/^void mds_cl_create(mdsserventry* eptr,ppacket* inp){$/;"	f
mds_cl_getattr	mds/mds.c	/^void mds_cl_getattr(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_lookup_chunk	mds/mds.c	/^void mds_cl_lookup_chunk(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_open	mds/mds.c	/^void mds_cl_open(mdsserventry* eptr,ppacket* inp){$/;"	f
mds_cl_pop_chunk	mds/mds.c	/^void mds_cl_pop_chunk(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_read_chunk_info	mds/mds.c	/^void mds_cl_read_chunk_info(mdsserventry* eptr,ppacket* p){$/;"	f
mds_cl_readdir	mds/mds.c	/^void mds_cl_readdir(mdsserventry* eptr,ppacket* p){$/;"	f
mds_create	mds/mds.c	/^void mds_create(mdsserventry* eptr,ppacket* p){$/;"	f
mds_desc	mds/mds.c	/^void mds_desc(struct pollfd *pdesc,uint32_t *ndesc) {$/;"	f
mds_direct_pass_cl	mds/mds.c	/^static void mds_direct_pass_cl(mdsserventry* eptr,ppacket* p,int cmd){$/;"	f	file:
mds_direct_pass_mi	mds/mds.c	/^static void mds_direct_pass_mi(ppacket* p,int cmd){$/;"	f	file:
mds_entry_from_id	mds/mds.c	/^mdsserventry* mds_entry_from_id(int id){ \/\/maybe add a hash?$/;"	f
mds_fw_read_chunk_info	mds/mds.c	/^void mds_fw_read_chunk_info(mdsserventry* eptr,ppacket* p){$/;"	f
mds_getattr	mds/mds.c	/^void mds_getattr(mdsserventry* eptr,ppacket* p){$/;"	f
mds_gotpacket	mds/mds.c	/^void mds_gotpacket(mdsserventry* eptr,ppacket* p){$/;"	f
mds_init	mds/mds.c	/^int mds_init(void){$/;"	f
mds_open	mds/mds.c	/^void mds_open(mdsserventry* eptr,ppacket* inp){$/;"	f
mds_read	mds/mds.c	/^void mds_read(mdsserventry *eptr) {$/;"	f
mds_readdir	mds/mds.c	/^void mds_readdir(mdsserventry* eptr,ppacket* p){$/;"	f
mds_serve	mds/mds.c	/^void mds_serve(struct pollfd *pdesc) {$/;"	f
mds_term	mds/mds.c	/^void mds_term(void) {$/;"	f
mds_update_attr	mds/mds.c	/^static void mds_update_attr(ppacket* p,ppfile* f){$/;"	f	file:
mds_write	mds/mds.c	/^void mds_write(mdsserventry *eptr) {$/;"	f
mdschunk	mds/chunks.h	/^typedef struct mdschunk{$/;"	s
mdschunk	mds/chunks.h	/^} mdschunk;$/;"	t	typeref:struct:mdschunk
mdscs_append_chunk	mds/mdscs.c	/^int mdscs_append_chunk(ppfile* f,mdschunk* c){$/;"	f
mdscs_delete_chunk	mds/mdscs.c	/^void mdscs_delete_chunk(uint64_t chunkid){$/;"	f
mdscs_desc	mds/mdscs.c	/^void mdscs_desc(struct pollfd *pdesc,uint32_t *ndesc) {$/;"	f
mdscs_find_serventry	mds/mdscs.c	/^mdscsserventry* mdscs_find_serventry(uint64_t chunkid){$/;"	f
mdscs_gotpacket	mds/mdscs.c	/^void mdscs_gotpacket(mdscsserventry* eptr,ppacket* p){$/;"	f
mdscs_init	mds/mdscs.c	/^int mdscs_init(void){$/;"	f
mdscs_new_chunk	mds/mdscs.c	/^void mdscs_new_chunk(mdschunk** c){$/;"	f
mdscs_pop_chunk	mds/mdscs.c	/^int mdscs_pop_chunk(ppfile* f,uint64_t* id){$/;"	f
mdscs_read	mds/mdscs.c	/^void mdscs_read(mdscsserventry *eptr) {$/;"	f
mdscs_register	mds/mdscs.c	/^void mdscs_register(mdscsserventry* eptr,ppacket* p){$/;"	f
mdscs_serve	mds/mdscs.c	/^void mdscs_serve(struct pollfd *pdesc) {$/;"	f
mdscs_term	mds/mdscs.c	/^void mdscs_term(void) {$/;"	f
mdscs_update_status	mds/mdscs.c	/^void mdscs_update_status(mdscsserventry* eptr,ppacket* p){$/;"	f
mdscs_write	mds/mdscs.c	/^void mdscs_write(mdscsserventry *eptr) {$/;"	f
mdscsserventry	mds/mdscs.h	/^} mdscsserventry;$/;"	t	typeref:struct:_mdscsserventry
mdscsservhead	mds/mdscs.c	/^static mdscsserventry* mdscsservhead = NULL;$/;"	v	file:
mdshash	mds/chunks.c	/^typedef struct mdshash{$/;"	s	file:
mdshash	mds/chunks.c	/^} mdshash;$/;"	t	typeref:struct:mdshash	file:
mdshostip	cs/csmds.c	/^static char* mdshostip = "127.0.0.1";$/;"	v	file:
mdsserventry	mds/mds.h	/^} mdsserventry;$/;"	t	typeref:struct:_mdsserventry
mdsservhead	mds/mds.c	/^static mdsserventry* mdsservhead = NULL;$/;"	v	file:
mdtomi	mds/mds.c	/^static mdsserventry* mdtomi = NULL;$/;"	v	file:
mfs_arg_errlog	common/slogger.h	27;"	d
mfs_arg_errlog_silent	common/slogger.h	34;"	d
mfs_arg_syslog	common/slogger.h	16;"	d
mfs_errlog	common/slogger.h	21;"	d
mfs_errlog_silent	common/slogger.h	33;"	d
mfs_syslog	common/slogger.h	11;"	d
min	cs/chunks.c	5;"	d	file:
mis_access	mis/mis.c	/^void mis_access(misserventry* eptr,ppacket* inp){$/;"	f
mis_chgrp	mis/mis.c	/^void mis_chgrp(misserventry* eptr,ppacket* inp){$/;"	f
mis_chmod	mis/mis.c	/^void mis_chmod(misserventry* eptr,ppacket* inp){$/;"	f
mis_chown	mis/mis.c	/^void mis_chown(misserventry* eptr,ppacket* inp){$/;"	f
mis_create	mis/mis.c	/^void mis_create(misserventry* eptr,ppacket* inp){$/;"	f
mis_desc	mis/mis.c	/^void mis_desc(struct pollfd *pdesc,uint32_t *ndesc) {$/;"	f
mis_entry_from_ip	mis/mis.c	/^misserventry* mis_entry_from_ip(int ip){ \/\/maybe add a hash?$/;"	f
mis_fs_demo_init	mis/mis.c	/^void mis_fs_demo_init(void){$/;"	f
mis_fw_read_chunk_info	mis/mis.c	/^void mis_fw_read_chunk_info(misserventry* eptr,ppacket* p){$/;"	f
mis_getattr	mis/mis.c	/^void mis_getattr(misserventry* eptr,ppacket* inp){$/;"	f
mis_gotpacket	mis/mis.c	/^void mis_gotpacket(misserventry* eptr,ppacket* p){$/;"	f
mis_init	mis/mis.c	/^int mis_init(void){$/;"	f
mis_open	mis/mis.c	/^void mis_open(misserventry* eptr,ppacket* inp){$/;"	f
mis_read	mis/mis.c	/^void mis_read(misserventry *eptr) {$/;"	f
mis_readdir	mis/mis.c	/^void mis_readdir(misserventry* eptr,ppacket* inp){$/;"	f
mis_rfw_read_chunk_info	mis/mis.c	/^void mis_rfw_read_chunk_info(misserventry* eptr,ppacket* p){$/;"	f
mis_serve	mis/mis.c	/^void mis_serve(struct pollfd *pdesc) {$/;"	f
mis_term	mis/mis.c	/^void mis_term(void) {$/;"	f
mis_update_attr	mis/mis.c	/^void mis_update_attr(misserventry* eptr,ppacket* inp){ \/\/no need to send back$/;"	f
mis_write	mis/mis.c	/^void mis_write(misserventry *eptr) {$/;"	f
mishostip	mds/mds.c	/^static char* mishostip = "127.0.0.1";$/;"	v	file:
misserventry	mis/mis.h	/^} misserventry;$/;"	t	typeref:struct:_misserventry
misservhead	mis/mis.c	/^static misserventry* misservhead = NULL;$/;"	v	file:
mode	common/ppfile.h	/^  int mode;$/;"	m	struct:_attr
mode	cs/cscl.h	/^  uint8_t mode; \/\/0 - not active, 1 - read header, 2 - read packet$/;"	m	struct:_csclserventry
mode	cs/csmds.h	/^  uint8_t mode; \/\/0 - not active, 1 - read header, 2 - read packet$/;"	m	struct:_csmdsserventry
mode	echo/echo.h	/^  uint8_t mode;$/;"	m	struct:_echoserventry
mode	mds/mds.h	/^  uint8_t mode; \/\/0 - not active, 1 - read header, 2 - read packet$/;"	m	struct:_mdsserventry
mode	mds/mdscs.h	/^  uint8_t mode; \/\/0 - not active, 1 - read header, 2 - read packet$/;"	m	struct:_mdscsserventry
mode	mis/mis.h	/^  uint8_t mode; \/\/0 - not active, 1 - read header, 2 - read packet$/;"	m	struct:_misserventry
mtime	common/ppfile.h	/^  int atime,ctime,mtime;$/;"	m	struct:_attr
name	common/ppfile.h	/^  char* name;$/;"	m	struct:ppfile
name	cs/init.h	/^	char *name;$/;"	m	struct:__anon1
name	mds/init.h	/^	char *name;$/;"	m	struct:__anon8
name	mis/init.h	/^	char *name;$/;"	m	struct:__anon5
new_chunk	cs/chunks.c	/^cschunk* new_chunk(uint64_t chunkid){$/;"	f
new_chunk	mds/chunks.c	/^mdschunk* new_chunk(uint64_t chunkid,int ip,int occupy){$/;"	f
new_file	common/ppfile.c	/^ppfile* new_file(char* path,attr a){$/;"	f
next	common/main.c	/^	struct deentry *next;$/;"	m	struct:deentry	typeref:struct:deentry::deentry	file:
next	common/main.c	/^	struct pollentry *next;$/;"	m	struct:pollentry	typeref:struct:pollentry::pollentry	file:
next	common/ppcomm.h	/^  struct ppacket* next;$/;"	m	struct:ppacket	typeref:struct:ppacket::ppacket
next	common/ppds.h	/^  struct hashnode* next;$/;"	m	struct:hashnode	typeref:struct:hashnode::hashnode
next	common/ppds.h	/^  struct linklist* next;$/;"	m	struct:linklist	typeref:struct:linklist::linklist
next	common/ppfile.h	/^  struct ppfile* next;$/;"	m	struct:ppfile	typeref:struct:ppfile::ppfile
next	cs/chunks.c	/^  struct cshash* next;$/;"	m	struct:cshash	typeref:struct:cshash::cshash	file:
next	cs/cscl.h	/^  struct _csclserventry* next;$/;"	m	struct:_csclserventry	typeref:struct:_csclserventry::_csclserventry
next	cs/csmds.h	/^  struct _csmdsserventry* next;$/;"	m	struct:_csmdsserventry	typeref:struct:_csmdsserventry::_csmdsserventry
next	echo/echo.h	/^  struct _echoserventry* next;$/;"	m	struct:_echoserventry	typeref:struct:_echoserventry::_echoserventry
next	mds/chunks.c	/^  struct mdshash* next;$/;"	m	struct:mdshash	typeref:struct:mdshash::mdshash	file:
next	mds/mds.h	/^  struct _mdsserventry* next;$/;"	m	struct:_mdsserventry	typeref:struct:_mdsserventry::_mdsserventry
next	mds/mdscs.h	/^  struct _mdscsserventry* next;$/;"	m	struct:_mdscsserventry	typeref:struct:_mdscsserventry::_mdscsserventry
next	mis/mis.h	/^  struct _misserventry* next;$/;"	m	struct:_misserventry	typeref:struct:_misserventry::_misserventry
node_free	mds/mds_fs.c	/^static void node_free(hashnode* n){$/;"	f	file:
node_free	mis/mis_fs.c	/^static void node_free(hashnode* n){$/;"	f	file:
node_new	mds/mds_fs.c	/^static hashnode* node_new(ppfile* f){$/;"	f	file:
node_new	mis/mis_fs.c	/^static hashnode* node_new(ppfile* f){$/;"	f	file:
now	common/main.c	/^static uint32_t now;$/;"	v	file:
num	common/strerr.c	/^	int num;$/;"	m	struct:errent	file:
occupy	cs/chunks.h	/^  int occupy;$/;"	m	struct:cschunk
occupy	mds/chunks.h	/^  int occupy;$/;"	m	struct:mdschunk
outpacket	cs/cscl.h	/^  ppacket* outpacket;$/;"	m	struct:_csclserventry
outpacket	cs/csmds.h	/^  ppacket* outpacket;$/;"	m	struct:_csmdsserventry
outpacket	mds/mds.h	/^  ppacket* outpacket;$/;"	m	struct:_mdsserventry
outpacket	mds/mdscs.h	/^  ppacket* outpacket;$/;"	m	struct:_mdscsserventry
outpacket	mis/mis.h	/^  ppacket* outpacket;$/;"	m	struct:_misserventry
p	common/random.c	/^static uint8_t p[256];$/;"	v	file:
padding	common/md5.c	/^static const uint8_t padding[64] = {$/;"	v	file:
passert	common/massert.h	29;"	d
path	common/ppfile.h	/^  char* path;$/;"	m	struct:ppfile
pdescpos	cs/cscl.h	/^  int pdescpos;$/;"	m	struct:_csclserventry
pdescpos	cs/csmds.h	/^  int pdescpos;$/;"	m	struct:_csmdsserventry
pdescpos	echo/echo.h	/^  int pdescpos;$/;"	m	struct:_echoserventry
pdescpos	mds/mds.h	/^  int pdescpos;$/;"	m	struct:_mdsserventry
pdescpos	mds/mdscs.h	/^  int pdescpos;$/;"	m	struct:_mdscsserventry
pdescpos	mis/mis.h	/^  int pdescpos;$/;"	m	struct:_misserventry
peerip	cs/cscl.h	/^	uint32_t peerip;$/;"	m	struct:_csclserventry
peerip	cs/csmds.h	/^	uint32_t peerip;$/;"	m	struct:_csmdsserventry
peerip	echo/echo.h	/^	uint32_t peerip;$/;"	m	struct:_echoserventry
peerip	mds/mds.h	/^	uint32_t peerip;$/;"	m	struct:_mdsserventry
peerip	mds/mdscs.h	/^	uint32_t peerip;$/;"	m	struct:_mdscsserventry
peerip	mis/mis.h	/^	uint32_t peerip;$/;"	m	struct:_misserventry
pollentry	common/main.c	/^typedef struct pollentry {$/;"	s	file:
pollentry	common/main.c	/^} pollentry;$/;"	t	typeref:struct:pollentry	file:
pollhead	common/main.c	/^static pollentry *pollhead=NULL;$/;"	v	file:
port	client/client.c	/^char *port = "8125";$/;"	v
ppacket	common/ppcomm.h	/^typedef struct ppacket{$/;"	s
ppacket	common/ppcomm.h	/^} ppacket;$/;"	t	typeref:struct:ppacket
ppfile	common/ppfile.h	/^typedef struct ppfile{$/;"	s
ppfile	common/ppfile.h	/^} ppfile;$/;"	t	typeref:struct:ppfile
ppfs_access	client/client.c	/^int ppfs_access (const char *path, int i){$/;"	f
ppfs_chmod	client/client.c	/^int	ppfs_chmod (const char *path, mode_t mt){$/;"	f
ppfs_chown	client/client.c	/^int	ppfs_chown (const char *path, uid_t uid, gid_t gid){$/;"	f
ppfs_create	client/client.c	/^int	ppfs_create (const char *path, mode_t mt, struct fuse_file_info *fi){$/;"	f
ppfs_flush	client/client.c	/^int	ppfs_flush (const char *path, struct fuse_file_info *fi){}$/;"	f
ppfs_fsinit	client/client.c	/^void* ppfs_fsinit( struct fuse_conn_info* conn ) { \/\/connect to MDS$/;"	f
ppfs_fsync	client/client.c	/^int	ppfs_fsync (const char *path, int i, struct fuse_file_info *fi){}$/;"	f
ppfs_getattr	client/client.c	/^int ppfs_getattr(const char* path, struct stat* stbuf){$/;"	f
ppfs_link	client/client.c	/^int ppfs_link(const char* path, const char* path2 ){}$/;"	f
ppfs_mkdir	client/client.c	/^int ppfs_mkdir(const char* path, mode_t mt){}$/;"	f
ppfs_mknod	client/client.c	/^int ppfs_mknod(const char* path, mode_t mt, dev_t dt){}$/;"	f
ppfs_open	client/client.c	/^int ppfs_open(const char* path, struct fuse_file_info* fi){$/;"	f
ppfs_opendir	client/client.c	/^int ppfs_opendir(const char* path, struct fuse_file_info* fi){$/;"	f
ppfs_oper	client/client.c	/^static struct fuse_operations ppfs_oper = {$/;"	v	typeref:struct:fuse_operations	file:
ppfs_read	client/client.c	/^int	ppfs_read (const char * path, char * buf, size_t size, off_t offset, struct fuse_file_info *fi){$/;"	f
ppfs_readdir	client/client.c	/^int	ppfs_readdir (const char *path, void *buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info *fi){$/;"	f
ppfs_readlink	client/client.c	/^int	ppfs_readlink (const char *path, char *buf, size_t st){}$/;"	f
ppfs_release	client/client.c	/^int	ppfs_release (const char *path, struct fuse_file_info *fi){}$/;"	f
ppfs_releasedir	client/client.c	/^int	ppfs_releasedir (const char *path, struct fuse_file_info *fi){}$/;"	f
ppfs_rename	client/client.c	/^int	ppfs_rename (const char *path, const char *newpath){$/;"	f
ppfs_rmdir	client/client.c	/^int	ppfs_rmdir (const char *path){}$/;"	f
ppfs_statfs	client/client.c	/^int ppfs_statfs (const char *path, struct statvfs * st){}$/;"	f
ppfs_symlink	client/client.c	/^int	ppfs_symlink (const char *path, const char *path2){}$/;"	f
ppfs_unlink	client/client.c	/^int	ppfs_unlink (const char *path){}$/;"	f
ppfs_write	client/client.c	/^int	ppfs_write (const char *path, const char *buf, size_t st, off_t off, struct fuse_file_info *fi){}$/;"	f
prev	common/ppds.h	/^  struct linklist* prev;$/;"	m	struct:linklist	typeref:struct:linklist::linklist
print_attr	api_test/api_test.c	/^void print_attr(const attr* a){$/;"	f
print_attr	client/client.c	/^void print_attr(const attr* a){$/;"	f
put16bit	common/datapack.h	/^static inline void put16bit(uint8_t **ptr,uint16_t val) {$/;"	f
put32bit	common/datapack.h	/^static inline void put32bit(uint8_t **ptr,uint32_t val) {$/;"	f
put64bit	common/datapack.h	/^static inline void put64bit(uint8_t **ptr,uint64_t val) {$/;"	f
put8bit	common/datapack.h	/^static inline void put8bit(uint8_t **ptr,uint8_t val) {$/;"	f
read_chunk	cs/chunks.c	/^int read_chunk(cschunk* c,uint8_t* buf,int offset,int len){$/;"	f
receivepacket	api_test/api_test.c	/^ppacket* receivepacket(int sockfd){$/;"	f
receivepacket	client/client.c	/^ppacket* receivepacket(int sockfd){$/;"	f
ref	common/ppfile.h	/^  int ref;$/;"	m	struct:ppfile
remove_chunk	cs/chunks.c	/^void remove_chunk(uint64_t chunkid){$/;"	f
remove_chunk	mds/chunks.c	/^void remove_chunk(uint64_t chunkid){$/;"	f
remove_file	mds/mds_fs.c	/^void remove_file(ppfile* f){$/;"	f
remove_file	mis/mis_fs.c	/^void remove_file(ppfile* f){$/;"	f
reserved	cs/chunks.h	/^  void* reserved;$/;"	m	struct:cschunk
rnd_init	common/random.c	/^int rnd_init(void) {$/;"	f
rndu32	common/random.c	/^uint32_t rndu32() {$/;"	f
rndu32_ranged	common/random.c	/^uint32_t rndu32_ranged(uint32_t range) {$/;"	f
rndu64	common/random.c	/^uint64_t rndu64() {$/;"	f
rndu64_ranged	common/random.c	/^uint64_t rndu64_ranged(uint64_t range) {$/;"	f
rndu8	common/random.c	/^uint8_t rndu8() {$/;"	f
root	mis/mis.c	/^static ppfile* root;$/;"	v	file:
runfn	cs/init.h	/^typedef int (*runfn)(void);$/;"	t
runfn	mds/init.h	/^typedef int (*runfn)(void);$/;"	t
runfn	mis/init.h	/^typedef int (*runfn)(void);$/;"	t
sassert	common/massert.h	30;"	d
send_and_receive	api_test/api_test.c	/^static void send_and_receive(int sockfd,int ip,char* path,int cmd){$/;"	f	file:
sendpacket	api_test/api_test.c	/^void sendpacket(int sockfd,ppacket* p){$/;"	f
sendpacket	client/client.c	/^void sendpacket(int sockfd,ppacket* p){$/;"	f
serve	common/main.c	/^	void (*serve)(struct pollfd *);$/;"	m	struct:pollentry	file:
set_signal_handlers	common/main.c	/^void set_signal_handlers(){$/;"	f
size	common/ppcomm.h	/^  int size;$/;"	m	struct:ppacket
size	common/ppfile.h	/^  int size;$/;"	m	struct:_attr
sock	cs/cscl.h	/^  int sock; $/;"	m	struct:_csclserventry
sock	cs/csmds.h	/^  int sock; $/;"	m	struct:_csmdsserventry
sock	echo/echo.h	/^  int sock; \/\/0 - not active, 1 - read header, 2 - read packet$/;"	m	struct:_echoserventry
sock	mds/mds.h	/^  int sock; $/;"	m	struct:_mdsserventry
sock	mds/mdscs.h	/^  int sock; $/;"	m	struct:_mdscsserventry
sock	mis/mis.h	/^  int sock; $/;"	m	struct:_misserventry
sockaddrfill	common/sockets.c	/^static inline int sockaddrfill(struct sockaddr_in *sa,const char *hostname,const char *service,int family,int socktype,int passive) {$/;"	f	file:
sockaddrnumfill	common/sockets.c	/^static inline int sockaddrnumfill(struct sockaddr_in *sa,uint32_t ip,uint16_t port) {$/;"	f	file:
socknonblock	common/sockets.c	/^static inline int socknonblock(int sock) {$/;"	f	file:
sockresolve	common/sockets.c	/^static inline int sockresolve(const char *hostname,const char *service,uint32_t *ip,uint16_t *port,int family,int socktype,int passive) {$/;"	f	file:
space	cs/chunks.c	/^static int space,availspace,chunks;$/;"	v	file:
space	mds/mdscs.h	/^  int space,availspace,chunks;$/;"	m	struct:_mdscsserventry
srcip	common/ppfile.h	/^  int srcip; \/\/where this file is located$/;"	m	struct:ppfile
startptr	common/ppcomm.h	/^  char* startptr;$/;"	m	struct:ppacket
startptr	cs/cscl.h	/^  uint8_t* startptr;$/;"	m	struct:_csclserventry
startptr	cs/csmds.h	/^  uint8_t* startptr;$/;"	m	struct:_csmdsserventry
startptr	mds/mds.h	/^  uint8_t* startptr;$/;"	m	struct:_mdsserventry
startptr	mds/mdscs.h	/^  uint8_t* startptr;$/;"	m	struct:_mdscsserventry
startptr	mis/mis.h	/^  uint8_t* startptr;$/;"	m	struct:_misserventry
state	common/md5.h	/^	uint32_t state[4];$/;"	m	struct:_md5ctx
str	common/strerr.c	/^	const char* str;$/;"	m	struct:errent	file:
strdup	common/ppds.c	/^char* strdup(const char*s){$/;"	f
strerr	common/strerr.c	/^const char* strerr(int error) {$/;"	f
strerr_init	common/strerr.c	/^void strerr_init(void) {$/;"	f
strerr_term	common/strerr.c	/^void strerr_term(void) {$/;"	f
strhash	common/ppds.h	/^static unsigned int strhash(char* s){$/;"	f
tab	cs/chunks.c	/^static cshash* tab[CHUNKTABSIZE];$/;"	v	file:
tab	mds/chunks.c	/^static mdshash* tab[CHUNKTABSIZE];$/;"	v	file:
tab	mds/mds_fs.c	/^static hashnode* tab[HASHSIZE];$/;"	v	file:
tab	mis/mis_fs.c	/^static hashnode* tab[HASHSIZE];$/;"	v	file:
tcpaccept	common/sockets.c	/^int tcpaccept(int lsock) {$/;"	f
tcpaccfdata	common/sockets.c	/^int tcpaccfdata(int sock) {$/;"	f
tcpaccfhttp	common/sockets.c	/^int tcpaccfhttp(int sock) {$/;"	f
tcpclose	common/sockets.c	/^int tcpclose(int sock) {$/;"	f
tcpgetmyaddr	common/sockets.c	/^int tcpgetmyaddr(int sock,uint32_t *ip,uint16_t *port) {$/;"	f
tcpgetpeer	common/sockets.c	/^int tcpgetpeer(int sock,uint32_t *ip,uint16_t *port) {$/;"	f
tcpgetstatus	common/sockets.c	/^int tcpgetstatus(int sock) {$/;"	f
tcpnodelay	common/sockets.c	/^int tcpnodelay(int sock) {$/;"	f
tcpnonblock	common/sockets.c	/^int tcpnonblock(int sock) {$/;"	f
tcpnumbind	common/sockets.c	/^int tcpnumbind(int sock,uint32_t ip,uint16_t port) {$/;"	f
tcpnumconnect	common/sockets.c	/^int tcpnumconnect(int sock,uint32_t ip,uint16_t port) {$/;"	f
tcpnumlisten	common/sockets.c	/^int tcpnumlisten(int sock,uint32_t ip,uint16_t port,uint16_t queue) {$/;"	f
tcpnumtoconnect	common/sockets.c	/^int tcpnumtoconnect(int sock,uint32_t ip,uint16_t port,uint32_t msecto) {$/;"	f
tcpresolve	common/sockets.c	/^int tcpresolve(const char *hostname,const char *service,uint32_t *ip,uint16_t *port,int passive) {$/;"	f
tcpreuseaddr	common/sockets.c	/^int tcpreuseaddr(int sock) {$/;"	f
tcpsetacceptfilter	common/sockets.c	/^int tcpsetacceptfilter(int sock) {$/;"	f
tcpsocket	common/sockets.c	/^int tcpsocket(void) {$/;"	f
tcpstrbind	common/sockets.c	/^int tcpstrbind(int sock,const char *hostname,const char *service) {$/;"	f
tcpstrconnect	common/sockets.c	/^int tcpstrconnect(int sock,const char *hostname,const char *service) {$/;"	f
tcpstrlisten	common/sockets.c	/^int tcpstrlisten(int sock,const char *hostname,const char *service,uint16_t queue) {$/;"	f
tcpstrtoconnect	common/sockets.c	/^int tcpstrtoconnect(int sock,const char *hostname,const char *service,uint32_t msecto) {$/;"	f
tcptoaccept	common/sockets.c	/^int tcptoaccept(int sock,uint32_t msecto) {$/;"	f
tcptoread	common/sockets.c	/^int32_t tcptoread(int sock,void *buff,uint32_t leng,uint32_t msecto) {$/;"	f
tcptowrite	common/sockets.c	/^int32_t tcptowrite(int sock,const void *buff,uint32_t leng,uint32_t msecto) {$/;"	f
term_fs	mds/mds_fs.c	/^void term_fs(){$/;"	f
term_fs	mis/mis_fs.c	/^void term_fs(){$/;"	f
termhandle	common/main.c	/^void termhandle(int signo){$/;"	f
termsignal	common/main.c	/^static int termsignal[]={$/;"	v	file:
udpclose	common/sockets.c	/^int udpclose(int sock) {$/;"	f
udpnonblock	common/sockets.c	/^int udpnonblock(int sock) {$/;"	f
udpnumlisten	common/sockets.c	/^int udpnumlisten(int sock,uint32_t ip,uint16_t port) {$/;"	f
udpread	common/sockets.c	/^int udpread(int sock,uint32_t *ip,uint16_t *port,void *buff,uint16_t leng) {$/;"	f
udpresolve	common/sockets.c	/^int udpresolve(const char *hostname,const char *service,uint32_t *ip,uint16_t *port,int passive) {$/;"	f
udpsocket	common/sockets.c	/^int udpsocket(void) {$/;"	f
udpstrlisten	common/sockets.c	/^int udpstrlisten(int sock,const char *hostname,const char *service) {$/;"	f
udpwrite	common/sockets.c	/^int udpwrite(int sock,uint32_t ip,uint16_t port,const void *buff,uint16_t leng) {$/;"	f
uid	common/ppfile.h	/^  int uid,gid;$/;"	m	struct:_attr
usecnow	common/main.c	/^static uint64_t usecnow;$/;"	v	file:
write_chunk	cs/chunks.c	/^int write_chunk(cschunk* c,const uint8_t* buf,int offset,int len){$/;"	f
writelen	echo/echo.h	/^  int writelen;$/;"	m	struct:_echoserventry
zassert	common/massert.h	37;"	d
